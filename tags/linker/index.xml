<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linker on Kya's Blog</title><link>https://kya8.github.io/tags/linker/</link><description>Recent content in Linker on Kya's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://kya8.github.io/tags/linker/index.xml" rel="self" type="application/rss+xml"/><item><title>any_ref w/o RTTI</title><link>https://kya8.github.io/p/any_ref-w/o-rtti/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://kya8.github.io/p/any_ref-w/o-rtti/</guid><description>&lt;h1 id="stdany-vs-any_ref">&lt;code>std::any&lt;/code> vs &lt;code>any_ref&lt;/code>
&lt;/h1>&lt;p>众所周知, &lt;code>std::any&lt;/code>是一个类型擦除的容器. 相比&lt;code>void*&lt;/code>的, 它的主要区别就是:&lt;/p>
&lt;ol>
&lt;li>&lt;code>any_cast&lt;/code>会保证类型安全.&lt;/li>
&lt;li>有明确的所有权语义, 会自己管理被容纳对象的析构, 拷贝等操作. 而&lt;code>void*&lt;/code>的所有权语义不明.&lt;/li>
&lt;/ol>
&lt;h2 id="非所有权的类型擦除引用">非所有权的类型擦除引用
&lt;/h2>&lt;p>如果我们把上述的第二点改为明确的无所有权语义, 那就得到了&lt;code>any_ref&lt;/code>. 类似于&lt;code>std::function&lt;/code>和&lt;code>std::function_ref&lt;/code>的区别.&lt;/p>
&lt;p>不过, C++标准库中目前还没有&lt;code>any_ref&lt;/code>. 在一些第三方库中能见到.&lt;/p>
&lt;h1 id="实现any_ref">实现&lt;code>any_ref&lt;/code>
&lt;/h1>&lt;p>&lt;code>any_ref&lt;/code>的实现要比&lt;code>std::any&lt;/code>简单很多, 因为不需要管理对象的生命周期, 实际上可以看做是&lt;code>void*&lt;/code>的一个简单wrapper. 相比之下, &lt;code>std::any&lt;/code>需要一个类似虚表的结构, 存一些函数指针, 用于析构, 拷贝, move等操作. 一般来说, &lt;code>any_ref&lt;/code>只需要存一个&lt;code>void*&lt;/code>指针, 和一个用来辨别类型的变量.&lt;/p>
&lt;h2 id="无rtti实现">无RTTI实现
&lt;/h2>&lt;p>如果使用RTTI, 那么只需要对比构建时和cast时的&lt;code>typeid&lt;/code>即可. 但为了性能等原因, 如果不使用RTTI, 能不能实现? 答案是肯定的, 只需要利用&lt;code>inline&lt;/code>函数或变量&lt;em>地址的唯一性&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>An inline function or variable shall be defined in every translation unit in which it is odr-used and shall
have exactly the same definition in every case (6.2). &amp;hellip;&amp;hellip; &lt;strong>An
inline function or variable with external linkage shall have the same address in all translation units.&lt;/strong>&lt;br>
&amp;ndash; &lt;em>C++17 specification n4713, §10.1.6&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>例如, 我们可以使用一个&lt;code>inline&lt;/code>的变量模版, 这个模版若用相同的地址单态化, 即使是在不同的编译单元(TU)内, 产生的变量也会具有相同的指针地址.
反之, 如果用不同的类型单态化, 变量地址也会不同. 利用这一点就能实现&lt;code>any_ref&lt;/code>cast时的类型验证.&lt;/p>
&lt;p>这里直接给出一个简单的实现:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdexcept&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;type_traits&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">detail&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">any_ref_helper&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c1">// namespace detail
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AnyRef&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Prevent shadowing the copy constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">enable_if_t&lt;/span>&lt;span class="o">&amp;lt;!&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">is_same_v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">remove_cv_t&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AnyRef&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">))),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">type_ptr_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">detail&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">cast&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">pT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">detail&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type_ptr_&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">pT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bad type!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">cast_if&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type_ptr_&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">detail&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">type_ptr_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>inline int any_ref_helper&lt;/code>作为上述的变量模版. 构建&lt;code>any_ref&lt;/code>时, 成员&lt;code>type_ptr_&lt;/code>记录了此模板以原对象的类型实例化后的地址.
&lt;code>cast()&lt;/code>时, 检查以目标类型和原类型实例化的&lt;code>any_ref_helper&lt;/code>地址是否相同. 如果相同, 前后类型一致. 否则类型不一致.&lt;/p>
&lt;p>注意, 构建函数用一个SFINAE禁用了以&lt;code>AnyRef&lt;/code>为参数(即指向另一个&lt;code>AnyRef&lt;/code>)的构建, 否则会导致&lt;code>AnyRef&lt;/code>无法拷贝构建.
(由于&lt;code>AnyRef&lt;/code>是一个非所有权引用, 因此它应当以拷贝传递/值传递, 类似&lt;code>std::string_view&lt;/code>)&lt;/p>
&lt;h1 id="跨编译单元行为">跨编译单元行为
&lt;/h1>&lt;p>为了测试上面的&lt;code>AnyRef&lt;/code>, 如果我们写一个简单的测试程序, 只有一个main.cpp, 那么显然可以work, 这种情况下&lt;code>any_ref_helper&amp;lt;T&amp;gt;&lt;/code>只有单个定义, 加不加&lt;code>inline&lt;/code>都没区别.&lt;/p>
&lt;p>有趣的部分在于, 如果在不同编译单元, 甚至跨动态链接边界, 分别使用&lt;code>AnyRef&lt;/code>的构建和cast, 是否能如期达成类型安全?
&lt;strong>毕竟这种类型擦除的主要意义就在于跨API, 跨编译单元&lt;/strong>, 用于减少编译头文件依赖, 加快编译, 统一API处类型等目的. 如果只在单个编译单元内部使用它, 属于是脱裤子放屁.&lt;/p>
&lt;p>回顾上文引用的C++标准段落, &lt;strong>单个程序(program)中&lt;/strong>, 一个&lt;code>inline&lt;/code>对象在不同编译单元的多个定义必定有相同的地址.&lt;/p>
&lt;p>但是:&lt;/p>
&lt;ul>
&lt;li>如果这些编译单元最终一起被静态链接到一个程序中, 那么它们应当是属于单个program, 因此地址的唯一性成立.&lt;/li>
&lt;li>如果一些编译单元最终成为一个动态链接库(DSO), 那么原则上这个DSO应当是一个单独的program, 和调用它的程序独立.&lt;/li>
&lt;/ul>
&lt;p>因此, 问题主要在于动态链接. 这里的bottomline是, C++标准不能保证各个平台/编译器上&lt;code>inline&lt;/code>地址唯一性能够跨动态链接成立.
但是, 不同的平台对动态链接的实现不同, 因此具体行为可能存在差异.&lt;/p>
&lt;p>总之关键在于: &lt;code>inline&lt;/code>对象在不同编译单元的地址唯一性, 在不同编译/链接环境和平台上, 具体行为如何?&lt;/p>
&lt;h2 id="测试程序">测试程序
&lt;/h2>&lt;p>我们为AnyRef写一个简单的跨TU测试项目.&lt;/p>
&lt;p>项目中定义一个库和一个主程序. 库导出一个函数, 参数为&lt;code>AnyRef&lt;/code>.
而主程序会管理被引用的对象, 把它用&lt;code>AnyRef&lt;/code>wrap起来, 传给库的函数.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lib.h:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;any_ref.hpp&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#if defined(MYLIB_SHARED)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># if defined(_WIN32)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># if defined(MYLIB_SOURCE)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># define MYLIB_EXPORT __declspec(dllexport)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># define MYLIB_EXPORT __declspec(dllimport)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># define MYLIB_EXPORT __attribute__((visibility(&amp;#34;default&amp;#34;)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="cp">#define MYLIB_EXPORT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Assumes str_ref is a const string ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MYLIB_EXPORT&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span> &lt;span class="n">str_ref&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意头文件中使用了API导出宏, 保证作为动态库时能正确导出符号.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lib.cpp:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;lib.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span> &lt;span class="n">str_ref&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str_ref&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;lib.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Hello!&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AnyRef&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ref&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后是项目的CMake定义, 通过&lt;code>-DBUILD_SHARED_LIBS=&amp;lt;0/1&amp;gt;&lt;/code>可选择&lt;code>mylib&lt;/code>是编译为静态库还是动态库.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># simple CMakeLists.txt:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">VERSION&lt;/span> &lt;span class="s">3.20.0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">anyref&lt;/span> &lt;span class="s">VERSION&lt;/span> &lt;span class="s">0.1.0&lt;/span> &lt;span class="s">LANGUAGES&lt;/span> &lt;span class="s">CXX&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">CMAKE_CXX_STANDARD_REQUIRED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">CMAKE_CXX_STANDARD&lt;/span> &lt;span class="s">17&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">CMAKE_CXX_EXTENSIONS&lt;/span> &lt;span class="s">OFF&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_compile_options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;$&amp;lt;IF:$&amp;lt;CXX_COMPILER_ID:MSVC&amp;gt;,/W4,-Wall;-Wextra;-pedantic&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_library&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">mylib&lt;/span> &lt;span class="s">lib.h&lt;/span> &lt;span class="s">lib.cpp&lt;/span> &lt;span class="s">any_ref.hpp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># --- For export macros
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nb">get_target_property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">mylib_type&lt;/span> &lt;span class="s">mylib&lt;/span> &lt;span class="s">TYPE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">mylib_type&lt;/span> &lt;span class="s">STREQUAL&lt;/span> &lt;span class="s">SHARED_LIBRARY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">mylib&lt;/span> &lt;span class="s">PUBLIC&lt;/span> &lt;span class="s">MYLIB_SHARED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">endif&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_compile_definitions&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">mylib&lt;/span> &lt;span class="s">PRIVATE&lt;/span> &lt;span class="s">MYLIB_SOURCE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># ---
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">add_executable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">anyref&lt;/span> &lt;span class="s">main.cpp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">anyref&lt;/span> &lt;span class="s">mylib&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果程序如期运行, 那么主程序中&lt;code>lib_fn()&lt;/code>应输出&amp;quot;Hello!&amp;quot;. 否则将输出&amp;quot;Bad type!&amp;quot;.&lt;/p>
&lt;h2 id="静态链接">静态链接
&lt;/h2>&lt;p>当我们使用静态链接(&lt;code>-DBUILD_SHARED_LIBS=0&lt;/code>)编译并运行测试程序, 不出意外, 在各个平台都测试成功. 程序输出了两次&amp;quot;Hello!&amp;quot;.&lt;/p>
&lt;h2 id="动态链接">动态链接
&lt;/h2>&lt;p>这里我们先给出结果:&lt;/p>
&lt;p>(TODO: 等我有空了把macOS和MinGW补上)&lt;/p>
&lt;h3 id="windows-11-msvc">Windows 11, MSVC
&lt;/h3>&lt;p>结果为失败. 通过debugger或手动print能看出, &lt;code>inline&lt;/code>变量&lt;code>any_ref_helper&lt;/code>在主程序和动态库中的地址确实不同.&lt;/p>
&lt;p>&lt;img src="https://kya8.github.io/p/any_ref-w/o-rtti/win-dynlib.png"
width="901"
height="294"
srcset="https://kya8.github.io/p/any_ref-w/o-rtti/win-dynlib_hu_c8f821f4d6900ba9.png 480w, https://kya8.github.io/p/any_ref-w/o-rtti/win-dynlib_hu_969863a8f718aca4.png 1024w"
loading="lazy"
alt="Windows动态链接"
class="gallery-image"
data-flex-grow="306"
data-flex-basis="735px"
> &lt;img src="https://kya8.github.io/p/any_ref-w/o-rtti/win-staticlib.png"
width="891"
height="296"
srcset="https://kya8.github.io/p/any_ref-w/o-rtti/win-staticlib_hu_afb7419776e6672f.png 480w, https://kya8.github.io/p/any_ref-w/o-rtti/win-staticlib_hu_16fe8581db4dad0b.png 1024w"
loading="lazy"
alt="Windows静态链接"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="722px"
>&lt;/p>
&lt;h3 id="linux-gcc-glibc">Linux, GCC, glibc
&lt;/h3>&lt;p>实际测试平台是Fedora 42 和 Ubuntu 20.04. 编译器是GCC 15 和 GCC 9.&lt;/p>
&lt;p>结果为成功.&lt;/p>
&lt;h3 id="linux-gcc-musl">Linux, GCC, musl
&lt;/h3>&lt;p>测试平台是Alpine Linux, GCC 14.&lt;/p>
&lt;p>结果为成功.&lt;/p>
&lt;p>&lt;img src="https://kya8.github.io/p/any_ref-w/o-rtti/alpine.png"
width="599"
height="374"
srcset="https://kya8.github.io/p/any_ref-w/o-rtti/alpine_hu_41abcea09223dae8.png 480w, https://kya8.github.io/p/any_ref-w/o-rtti/alpine_hu_eeef3352e821b564.png 1024w"
loading="lazy"
alt="Alpine, musl"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;h3 id="linux-clang-glibc">Linux, Clang, glibc
&lt;/h3>&lt;p>实际测试平台是Fedora 42 和 Ubuntu 20.04. 编译器是Clang 20 和 Clang 12.&lt;/p>
&lt;p>结果为成功.&lt;/p>
&lt;h3 id="linux-但-fvisibilityhidden">Linux, 但&lt;code>-fvisibility=hidden&lt;/code>
&lt;/h3>&lt;ul>
&lt;li>Clang 结果均为失败.&lt;/li>
&lt;li>所有 GCC 结果仍为成功.&lt;/li>
&lt;/ul>
&lt;h1 id="结果解读">结果解读
&lt;/h1>&lt;h2 id="linux">Linux
&lt;/h2>&lt;p>用&lt;code>nm&lt;/code>查看编译出的二进制文件, 可以看到符号导出情况:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 略去了无关的符号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Clang:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">libmylib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000000380&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000003044&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">detail&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">__cxx11&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">basic_string&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">char_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">anyref&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">U&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000403194&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">detail&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">__cxx11&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">basic_string&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">char_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Clang, -fvisibility=hidden:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">libmylib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000000380&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">anyref&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">U&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># GCC:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">libmylib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000000440&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000003044&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="n">detail&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">__cxx11&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">basic_string&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">char_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">anyref&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">U&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000403194&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="n">detail&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">__cxx11&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">basic_string&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">char_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># GCC, -fvisibility=hidden:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">libmylib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000000440&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000003044&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="n">detail&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">__cxx11&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">basic_string&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">char_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">nm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">CD&lt;/span> &lt;span class="n">anyref&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">U&lt;/span> &lt;span class="n">lib_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AnyRef&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0000000000403194&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="n">detail&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">any_ref_helper&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">__cxx11&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">basic_string&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">char_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">allocator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据&lt;code>man nm&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;V&amp;rdquo;, &amp;ldquo;v&amp;rdquo;: The symbol is a weak object. When a weak defined symbol is linked with a normal defined symbol, the normal defined symbol is used with no error. When a weak undefined symbol is linked and the symbol is not defined, the value of the weak symbol becomes zero with no error. On some systems, uppercase indicates that a default value has been specified.&lt;br>
&amp;ldquo;u&amp;rdquo;: The symbol is a unique global symbol. &lt;strong>This is a GNU extension to the standard set of ELF symbol. For such a symbol the dynamic linker will make sure that in the entire process there is just one symbol with this name and type in use&lt;/strong>.&lt;/p>&lt;/blockquote>
&lt;h3 id="clang">Clang
&lt;/h3>&lt;p>可以看出, Clang编译出的二进制中, 动态库和主程序均将&lt;code>any_ref_helper&lt;/code>导出为一个weak symbol.&lt;/p>
&lt;p>来自多个链接单元(这里就是我们测试的库&lt;code>mylib&lt;/code>和主程序&lt;code>anyref&lt;/code>)的同名weak symbol, 在(动态)链接时会统一选用其中的一个(一般是按顺序的第一个. 如果存在一个同名的strong symbol, 就总是选择strong symbol).&lt;/p>
&lt;p>对于定义为&lt;code>inline&lt;/code>的对象, 只要保证在各处的定义相同, 这么做就相当于使它们有了统一的定义, 且均指向其中某一个链接单元内的实例. 例如在我们的程序中, 如果动态链接下最终选择了&lt;code>libmylib.so&lt;/code>中的weak symbol, 主程序也会使用来自&lt;code>libmylib.so&lt;/code>的&lt;code>any_ref_helper&lt;/code>定义.&lt;/p>
&lt;p>(需要注意一点, 显然只有经过单态化后, &lt;code>any_ref_helper&amp;lt;T&amp;gt;&lt;/code>才可能被导出为symbol, 不然它只是一个模板.
在我们的测试项目中, &lt;code>any_ref_helper&lt;/code>只以&lt;code>const std::string&lt;/code>作为模板类型被单态化了, 且被定义了2次, 分别在&lt;code>mylib&lt;/code>和主程序中.
因此, 链接时可能选择其中的任意一个.)&lt;/p>
&lt;h3 id="gcc">GCC
&lt;/h3>&lt;p>根据上面引用的man page, GCC则是使用了一个非标准ELF符号类型, 也就是&lt;code>nm&lt;/code>输出的&amp;quot;u&amp;quot;. 这种符号专门用于保证整个进程中符号所代表对象的唯一性.&lt;/p>
&lt;p>可以看到, 测试的动态库和主程序中均含有这种类型的symbol对应&lt;code>any_ref_helper&lt;/code>. 因此, 链接时能确保两者引用的&lt;code>any_ref_helper&lt;/code>是同一个对象, 具有相同的地址.&lt;/p>
&lt;h3 id="-fvisibilityhidden">&lt;code>-fvisibility=hidden&lt;/code>
&lt;/h3>&lt;p>众所周知, Linux下大部分编译器在编译动态库时的默认设置都是导出所有&lt;em>具有external linkage的&lt;/em>对象. (参看: &lt;a class="link" href="https://gcc.gnu.org/wiki/Visibility" target="_blank" rel="noopener"
>https://gcc.gnu.org/wiki/Visibility&lt;/a>)&lt;/p>
&lt;p>利用选项&lt;code>-fvisibility=hidden&lt;/code>, 可将默认的符号可见性设为不可见, 除非用&lt;code>__attribute__((visibility(&amp;quot;default&amp;quot;)))&lt;/code>特别标注为需要导出. 这样做后的行为就和Windows平台上类似了.&lt;/p>
&lt;p>在我们的例子中, Clang由于&lt;code>any_ref_helper&lt;/code>是external linkage, 且默认visibility为可见, 就将它导出为了一个weak symbol. 而当我们启用&lt;code>-fvisibility=hidden&lt;/code>后, Clang就不再导出这个weak symbol了, 因而主程序和动态库会各自使用自己内部的&lt;code>any_ref_helper&lt;/code>, 测试结果失败.&lt;/p>
&lt;p>而对于使用了特殊符号&amp;quot;u&amp;quot;来实现&lt;code>inline&lt;/code>唯一性的GCC来说, visibility设置就没有影响了, 因为这种symbol只是用于确保唯一性, 不应受visibility影响.&lt;/p>
&lt;h2 id="windows">Windows
&lt;/h2>&lt;p>Windows的PE可执行格式中, COMDAT用于合并多个编译单元内的同一&lt;code>inline&lt;/code>对象, 保证它们的唯一性, 即COMDAT folding.&lt;/p>
&lt;p>但是, 这个合并仅作用于&lt;strong>组成单个PE文件的多个编译单元&lt;/strong>, 而DLL文件算作一个单独的module, 在编译链接DLL时, 它内部的COMDAT区域就已经固定. 运行时动态链接该DLL时, 不会再将它的COMDAT与调用程序的COMDAT合并.&lt;/p>
&lt;p>因此, 对于我们的测试程序, &lt;code>mylib.dll&lt;/code>中的&lt;code>any_ref_helper&lt;/code>和主程序中的并不是同一个对象, 而是属于各自内部, 具有不同的地址, 所以测试失败.&lt;/p>
&lt;h3 id="导出符号">导出符号
&lt;/h3>&lt;p>如果我们需要确保唯一性的&lt;code>inline&lt;/code>变量只是一个普通变量, 并不是一个会以任意类型单态化的模板, 那么解决方法就是仅在一个DLL导出这个变量(声明为&lt;code>__declspec(dllexport)&lt;/code>), 其它地方, 包括调用这个DLL的程序或其它DLL, 均声明为&lt;code>__declspec(dllimport)&lt;/code>.&lt;/p>
&lt;p>但是, &lt;code>AnyRef&lt;/code>中使用的&lt;code>inline&lt;/code>变量模板无法提供所有可能类型的单态化, 并不适用这个做法.&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>简而言之,&lt;/p>
&lt;ul>
&lt;li>&lt;code>any_ref&lt;/code>的非RTTI实现需要依赖&lt;code>inline&lt;/code>对象的地址唯一性, 但这个唯一性只对单个&amp;quot;程序&amp;quot;保证.&lt;/li>
&lt;li>一般而言, 动态链接库是一个单独的可执行image.&lt;/li>
&lt;li>但是, 在一些平台/编译器上, 存在一些机制能够跨动态链接边界&amp;quot;打洞&amp;quot;, 提供一些额外的保证.&lt;/li>
&lt;/ul></description></item></channel></rss>