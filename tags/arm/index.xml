<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arm on Kya's Blog</title><link>https://kya8.github.io/tags/arm/</link><description>Recent content in Arm on Kya's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kya8.github.io/tags/arm/index.xml" rel="self" type="application/rss+xml"/><item><title>Emulating ARM on QEMU, with UEFI</title><link>https://kya8.github.io/p/emulating-arm-on-qemu-with-uefi/</link><pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate><guid>https://kya8.github.io/p/emulating-arm-on-qemu-with-uefi/</guid><description>&lt;p>Emulating ARM machines on QEMU hasn&amp;rsquo;t been straight-forward due to lack of a
standardized way to configure the bootloader across different ARM boards. One
had to extract the kernel image, and specify the boot options on the command
line (&lt;code>-kernel&lt;/code>, &lt;code>-initrd&lt;/code>), so QEMU knows what to do with its machine-specific
boot code.&lt;/p>
&lt;p>We can make things easier with the help of UEFI (namely EDK2, with ARM support), so
installing and booting Linux just works like on a x86 PC target.&lt;/p>
&lt;h1 id="prerequisites">Prerequisites
&lt;/h1>&lt;ul>
&lt;li>QEMU system emulator for ARM.&lt;/li>
&lt;li>EDK2 binaries for ARM. They can be extracted from the debian package
&lt;code>qemu-efi-arm&lt;/code> or &lt;code>qemu-efi-aarch64&lt;/code>, depending on your target arch.&lt;/li>
&lt;li>Official Debian installer iso for ARM.&lt;/li>
&lt;/ul>
&lt;h1 id="booting-the-installer">Booting the installer
&lt;/h1>&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> This example is for arm32&lt;/p>&lt;/blockquote>
&lt;p>First of all, create a new disk image via &lt;code>qemu-img&lt;/code>. Copy EDK2 FW binaries
(&lt;code>AAVMF32_CODE.fd&lt;/code> and &lt;code>AAVMF32_VARS.fd&lt;/code>, the latter is for hosting volatile
variables) and the installer image to the same directory.&lt;/p>
&lt;p>We will be emulating the &lt;code>virt&lt;/code> board, which has support for virtio devices.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">qemu-system-arm -M virt -m 512M -cpu cortex-a15 -smp 4 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-device qemu-xhci -device usb-kbd \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-device usb-storage,drive=install -blockdev file,filename=debian-testing-armhf-DVD-1.iso,node-name=install \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-blockdev qcow2,node-name=root,file.driver=file,file.filename=disk0.qcow2 -device virtio-blk-device,drive=root \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-nic user,model=virtio \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-pflash ./AAVMF32_CODE.fd -pflash ./AAVMF32_VARS.fd \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-device ramfb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>The system is given 512M of RAM and 4 cpus
(depending on your QEMU version, this could mean either 4 sockets or 4 cores),
the CPU capability is set to &lt;code>cortex-a15&lt;/code>.&lt;/li>
&lt;li>&lt;code>-device qemu-xhci -device usb-kbd&lt;/code> attaches a low-overhead USB XHCI bus, and
a USB keyboard. You could add a mouse if needed.
Alternatively, on-board USB support that comes with &lt;code>virt&lt;/code> is available by passing &lt;code>-usb&lt;/code>.&lt;/li>
&lt;li>Next two lines attach the installer iso as a USB storage device, and the
rootfs disk as a virtio block device.&lt;/li>
&lt;li>&lt;code>-nic user,model=virtio&lt;/code> enables basic user-mode networking, backed by the
virtio NIC.&lt;/li>
&lt;li>&lt;code>-device ramfb&lt;/code> adds a simple display device, which is just a frambuffer in
guest memory. QEMU ARM system emulator does not emulate a display device by
default. The standard &lt;code>std&lt;/code> VGA won&amp;rsquo;t work since the installer environment
lacks required DRM kmods.&lt;/li>
&lt;/ul>
&lt;p>The graphics &amp;amp; input part can be left-out (with &lt;code>-nographic&lt;/code>),
in which case the installer will be presented on the serial console.&lt;/p>
&lt;p>The guest will now boot into the installer iso. Simply
follow the installation instructions, the grub-efi bootloader will be installed to the EFI firmware automatically.&lt;/p>
&lt;h1 id="booting-the-installed-system">Booting the installed system
&lt;/h1>&lt;p>No additional configuration is required.
Don&amp;rsquo;t forget to attach the UEFI firmware via &lt;code>-pflash&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">qemu-system-arm -M virt -m 512M -cpu cortex-a15 -smp 4 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-device qemu-xhci -device usb-kbd \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-blockdev qcow2,node-name=root,file.driver=file,file.filename=disk0.qcow2 -device virtio-blk-device,drive=root \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-nic user,model=virtio,hostfwd=tcp::2345-:22 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-pflash ./AAVMF32_CODE.fd -pflash ./AAVMF32_VARS.fd \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-device VGA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-virtfs local,path=/host/path/to/shared/,id=share,mount_tag=share,security_model=mapped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There are a few additional configurations:&lt;/p>
&lt;ul>
&lt;li>Host porting forwarding is enabled for host port 2345, to guest port 22.
This way we are able to ssh directly into the guest system.&lt;/li>
&lt;li>Attach a shared folder to the guest, backed by &lt;code>9pfs&lt;/code>.
The folder can be mounted in the guest via &lt;code>mount -t 9p -o trans=virtio share /path/to/mount&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kya8.github.io/p/emulating-arm-on-qemu-with-uefi/qemu-arm.png"
width="1154"
height="954"
srcset="https://kya8.github.io/p/emulating-arm-on-qemu-with-uefi/qemu-arm_hu_5ac4c89722fde978.png 480w, https://kya8.github.io/p/emulating-arm-on-qemu-with-uefi/qemu-arm_hu_345da8b712379c81.png 1024w"
loading="lazy"
alt="booted system"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>VoilÃ ! Your new virtual ARM system is ready to go!&lt;/p></description></item></channel></rss>